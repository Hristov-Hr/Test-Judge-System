 Requirements
Task Function (task_run):

This function should take input data as a string, process it, and return an output string.
Implement a sample task: Given a list of products and quantities, calculate the total quantity of each product and the total number of products.
User Solution Function (user_solution_run):

This function should be similar to task_run but implemented by the user.
Ensure it processes the input data correctly and returns the expected output.
Test Case Class (TestTask):

Define a class inheriting from unittest.TestCase.
Implement methods to test the task_run and user_solution_run functions.
Track the number of total tests and correct tests using class variables.
Judge Function (judge):

Create a function to run all the test cases using unittest and calculate the success rate.
Print the total number of tests, the number of correct tests, and the success rate.
Additional Features:

Implement a logging system to keep track of test results.
Add the ability to handle multiple test cases.
Create a user interface (CLI or web-based) for users to submit their solutions and view the results.
Use version control (Git) for collaborative development.
âœ… Project Points
Task Function Implementation (20 points)

Correctly processes the input data.
Generates the expected output format.
Handles edge cases (e.g., empty input, invalid data).
User Solution Function (20 points)

Mimics the behavior of the task function.
Correctly processes the input data and generates the expected output.
Test Case Class (30 points)

Implements unit tests for both task_run and user_solution_run.
Accurately tracks the number of tests and correct results.
Includes multiple test cases with varying input data.
Judge Function (20 points)

Runs the test cases and calculates the success rate.
Outputs the results in a clear and concise manner.
Additional Features (10 points)

Logging system for test results.
User interface for solution submission and result viewing.
Use of version control for collaborative development.
